// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: bid/v1/bid.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BidService_CreateBid_FullMethodName      = "/BidService/CreateBid"
	BidService_GetUserBid_FullMethodName     = "/BidService/GetUserBid"
	BidService_StreamOpenBids_FullMethodName = "/BidService/StreamOpenBids"
)

// BidServiceClient is the client API for BidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidServiceClient interface {
	CreateBid(ctx context.Context, in *CreateBidRequest, opts ...grpc.CallOption) (*CreateBidResponse, error)
	GetUserBid(ctx context.Context, in *GetUserBidRequest, opts ...grpc.CallOption) (*GetUserBidResponse, error)
	StreamOpenBids(ctx context.Context, in *StreamOpenBidsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamOpenBidsResponse], error)
}

type bidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidServiceClient(cc grpc.ClientConnInterface) BidServiceClient {
	return &bidServiceClient{cc}
}

func (c *bidServiceClient) CreateBid(ctx context.Context, in *CreateBidRequest, opts ...grpc.CallOption) (*CreateBidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBidResponse)
	err := c.cc.Invoke(ctx, BidService_CreateBid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) GetUserBid(ctx context.Context, in *GetUserBidRequest, opts ...grpc.CallOption) (*GetUserBidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBidResponse)
	err := c.cc.Invoke(ctx, BidService_GetUserBid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) StreamOpenBids(ctx context.Context, in *StreamOpenBidsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamOpenBidsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BidService_ServiceDesc.Streams[0], BidService_StreamOpenBids_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamOpenBidsRequest, StreamOpenBidsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidService_StreamOpenBidsClient = grpc.ServerStreamingClient[StreamOpenBidsResponse]

// BidServiceServer is the server API for BidService service.
// All implementations must embed UnimplementedBidServiceServer
// for forward compatibility.
type BidServiceServer interface {
	CreateBid(context.Context, *CreateBidRequest) (*CreateBidResponse, error)
	GetUserBid(context.Context, *GetUserBidRequest) (*GetUserBidResponse, error)
	StreamOpenBids(*StreamOpenBidsRequest, grpc.ServerStreamingServer[StreamOpenBidsResponse]) error
	mustEmbedUnimplementedBidServiceServer()
}

// UnimplementedBidServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBidServiceServer struct{}

func (UnimplementedBidServiceServer) CreateBid(context.Context, *CreateBidRequest) (*CreateBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBid not implemented")
}
func (UnimplementedBidServiceServer) GetUserBid(context.Context, *GetUserBidRequest) (*GetUserBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBid not implemented")
}
func (UnimplementedBidServiceServer) StreamOpenBids(*StreamOpenBidsRequest, grpc.ServerStreamingServer[StreamOpenBidsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOpenBids not implemented")
}
func (UnimplementedBidServiceServer) mustEmbedUnimplementedBidServiceServer() {}
func (UnimplementedBidServiceServer) testEmbeddedByValue()                    {}

// UnsafeBidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidServiceServer will
// result in compilation errors.
type UnsafeBidServiceServer interface {
	mustEmbedUnimplementedBidServiceServer()
}

func RegisterBidServiceServer(s grpc.ServiceRegistrar, srv BidServiceServer) {
	// If the following call pancis, it indicates UnimplementedBidServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BidService_ServiceDesc, srv)
}

func _BidService_CreateBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).CreateBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BidService_CreateBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).CreateBid(ctx, req.(*CreateBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_GetUserBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetUserBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BidService_GetUserBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetUserBid(ctx, req.(*GetUserBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_StreamOpenBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOpenBidsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BidServiceServer).StreamOpenBids(m, &grpc.GenericServerStream[StreamOpenBidsRequest, StreamOpenBidsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidService_StreamOpenBidsServer = grpc.ServerStreamingServer[StreamOpenBidsResponse]

// BidService_ServiceDesc is the grpc.ServiceDesc for BidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BidService",
	HandlerType: (*BidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBid",
			Handler:    _BidService_CreateBid_Handler,
		},
		{
			MethodName: "GetUserBid",
			Handler:    _BidService_GetUserBid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOpenBids",
			Handler:       _BidService_StreamOpenBids_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bid/v1/bid.proto",
}
